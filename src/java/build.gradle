//Gradle plugins
plugins {
	id "org.xtext.xtend" version "2.0.1" apply false
	id "com.google.protobuf" version "0.8.3" apply false
//	id "org.sonarqube" version "2.5"
	id 'org.hidetake.ssh' version '2.7.0'
	id 'com.diffplug.gradle.p2.asmaven' version '3.0.6'
	id 'com.github.johnrengelman.shadow' version '2.0.1'
}
    	
ssh.settings { knownHosts = allowAnyHosts }

//sonarqube {
//	properties { property "sonar.projectName", "MoDeS3" }
//}
	
subprojects {
	ext{
		viatraVersion = '1.7.0'
		xtendVersion = '2.11.0'
		componentsPrefix = gradle.ext.componentsPrefix
		safetylogicPrefix = gradle.ext.safetylogicPrefix
		messagingPrefix = gradle.ext.messagingPrefix
		transportsPrefix = gradle.ext.transportsPrefix
		utilsPrefix = gradle.ext.utilsPrefix
		testPrefix = gradle.ext.testPrefix
	}

	repositories {
		jcenter()
		mavenCentral()
		maven { url "https://repo.eclipse.org/content/groups/viatra2" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "http://dl.bintray.com/andsel/maven/" }
	}

	plugins.withType(JavaPlugin) {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		
		test {
			useJUnitPlatform()
		}
		dependencies {
			compile 'org.slf4j:slf4j-api:1.7.21'
			compile 'org.slf4j:slf4j-simple:1.7.21'

			compile group: 'org.eclipse.xtend', name: 'org.eclipse.xtend.lib', version: xtendVersion

			def mockitoVersion		= '2.23.0'
			def powermockVersion	= '2.0.0-beta.5'
			
			testCompile("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
			testCompile("org.mockito:mockito-core:${mockitoVersion}")
			testCompile("org.powermock:powermock-core:${powermockVersion}")
			testCompile("org.powermock:powermock-api-mockito2:${powermockVersion}")
			testCompile("org.powermock:powermock-module-junit4:${powermockVersion}")			
			
			def junit4Version        = '4.12'
			def junitVintageVersion  = '5.3.1'
			def junitJupiterVersion  = '5.3.1'
			def junitPlatformVersion = '1.3.1'
			// JUnit Jupiter API and TestEngine implementation
			testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
			testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")		
			
			testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"){
				because 'allows Parameterized notation for JUnit 4 tests'
			}
			testCompile("junit:junit:${junit4Version}")
			testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}") {
				because 'allows JUnit 3 and JUnit 4 tests to run'
			}
		
			testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}") {
				because 'allows tests to run from IDEs that bundle older version of launcher'
			}
		}
	}
	
	
	plugins.withType(org.xtext.gradle.XtendLanguagePlugin) {
		sourceSets {
			main {
				java.srcDirs = [
					'src/main/java',
					'src/main/xtext-gen'
				]
				resources.srcDirs = [
					'src/main/resources',
					'src/main/xtext-gen'
				]
				xtendOutputDir = 'src/main/xtend-gen'
			}
			test {
				java.srcDirs = [
					'src/test/java',
					'src/test/xtext-gen'
				]
				resources.srcDirs = [
					'src/test/resources',
					'src/test/xtext-gen'
				]
				xtendOutputDir = 'src/test/xtend-gen'
			}
		}
	}
}
